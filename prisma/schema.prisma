generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Model {
  User
  Role
  Post
  Category
  Tag
}

enum Lang {
    EN
    DV
}

enum UserStatus {
  active
  blocked
}

enum Action {
  draft
  publish
  soft_delete
  delete
  create
  update
}

enum Status {
  drafted
  published
  soft_deleted
  pending
}

enum AdTypes {
  t_banner
  ss_banner
  ess_banner
  ls_banner
  ml_banner
  msl_banner
  ia_banner
  ae_banner
}

model Country {
  id Int @id @default(autoincrement())

  name   String
  states State[] @relation("country")
}

model State {
  id        Int      @id @default(autoincrement())
  countryId Int?     @unique
  country   Country? @relation("country", fields: [countryId], references: [id], onDelete: Cascade)

  name   String
  cities City[] @relation("state")
}

model City {
  id      Int    @id @default(autoincrement())
  stateId Int?   @unique
  state   State? @relation("state", fields: [stateId], references: [id], onDelete: Cascade)

  name String
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("usersCreated", fields: [createdById], references: [id], onDelete: SetNull)

  userName             String     @unique
  userNameEn           String?    @unique
  email                String     @unique
  password             String
  description          String
  status               UserStatus @default(active)
  profilePictureUrl    String?       
  profilePicture       Media?     @relation("profilePicture", fields: [profilePictureUrl], references: [url], onDelete: SetNull)
  roleId               Int?       
  role                 Role?      @relation("roleUsers", fields: [roleId], references: [id], onDelete: SetNull)

  logs                 Log[]      @relation("logs")
  usersCreated         User[]     @relation("usersCreated")
  rolesCreated         Role[]     @relation("rolesCreated")
  mediasCreated        Media[]    @relation("mediasCreated")
  libraryGroupsCreated Library[]  @relation("libraryCreated")
  postsCreated         Post[]     @relation("postsCreated")
  photosCreated        Photo[]    @relation("photosCreated")
  graphicsCreated      Graphic[]  @relation("graphicsCreated")
  adBannersCreated     AdBanner[] @relation("adBannersCreated")
  videosCreated        Video[]    @relation("videosCreated")
  categoriesCreated    Category[] @relation("categoriesCreated")
  tagsCreated          Tag[]      @relation("tagsCreated")
}

model Role {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("rolesCreated", fields: [createdById], references: [id], onDelete: SetNull)

  name        String @unique
  permissions Json

  users User[] @relation("roleUsers")
}

model Log {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("logs", fields: [createdById], references: [id], onDelete: SetNull)

  action       Action
  model        Model
  previousData Json?
  newData      Json?
}

model Media {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("mediasCreated", fields: [createdById], references: [id], onDelete: SetNull)

  posts      Post[]       @relation("postFeatureImage")
  photos     Photo[]      @relation("photoFeatureImage")
  graphics   Graphic[]    @relation("graphics")
  adBanner   AdBanner[]   @relation("adBanner")
  user       User[]       @relation("profilePicture")
  mediasTags MediasTags[] @relation("mediasTags")

  url         String     @unique
  name        String
  caption     String?

  libraryGroupId Int?
  libraryGroup   Library? @relation("libraryGroup", fields: [libraryGroupId], references: [id], onDelete: SetNull)
}

model Library {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("libraryCreated", fields: [createdById], references: [id], onDelete: SetNull)

  name        String  @unique
  description String
  medias      Media[] @relation("libraryGroup")
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("postsCreated", fields: [createdById], references: [id], onDelete: SetNull)

  categoryId          Int?
  category            Category? @relation("postsCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  featureImageUrl     String?
  featureImage        Media?    @relation("postFeatureImage", fields: [featureImageUrl], references: [url], onDelete: SetNull)
  featureImageCaption String?

  title       String
  longTitle   String?
  latinTitle  String?
  description String?
  lead        String?
  breaking    Boolean?
  liveblog    Boolean?
  language    Lang   @default(EN)
  status      Status @default(drafted)
  views       Int    @default(0)

  postsTags PostsTags[] @relation("postsTags")
}

model Category {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("categoriesCreated", fields: [createdById], references: [id], onDelete: SetNull)

  name        String
  slug        String @unique
  description String?
  icon        String?
  language    Lang @default(EN)

  posts Post[] @relation("postsCategory")
}

model Tag {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("tagsCreated", fields: [createdById], references: [id], onDelete: SetNull)

  name        String
  slug        String @unique

  tagsPosts  PostsTags[] @relation("tagsPosts")
  tagsMedias MediasTags[] @relation("tagsMedias")
}

model PostsTags {
  id     Int   @id @default(autoincrement())
  postId Int
  post   Post? @relation("postsTags", fields: [postId], references: [id], onDelete: Cascade)
  tagId  Int
  tag    Tag?  @relation("tagsPosts", fields: [tagId], references: [id], onDelete: Cascade)
}

model MediasTags {
  id      Int   @id @default(autoincrement())
  mediaId Int
  media   Media? @relation("mediasTags", fields: [mediaId], references: [id], onDelete: Cascade)
  tagId   Int
  tag     Tag?  @relation("tagsMedias", fields: [tagId], references: [id], onDelete: Cascade)
}

model Photo {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("photosCreated", fields: [createdById], references: [id], onDelete: SetNull)

  featureImageUrl String?
  featureImage    Media?    @relation("photoFeatureImage", fields: [featureImageUrl], references: [url], onDelete: SetNull)

  title       String
  longTitle   String?
  latinTitle  String?
  description String?
  lead        String?
  language    Lang @default(EN)
  status      Status @default(drafted)
}

model Graphic {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("graphicsCreated", fields: [createdById], references: [id], onDelete: SetNull)

  graphicsUrl String?
  graphics    Media?    @relation("graphics", fields: [graphicsUrl], references: [url], onDelete: SetNull)

  title       String
  longTitle   String?
  latinTitle  String?
  slug        String @unique
  description String?
  language    Lang @default(EN)
  status      Status @default(drafted)
}

model AdBanner {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("adBannersCreated", fields: [createdById], references: [id], onDelete: SetNull)

  adBannerUrl String?
  adBanner    Media?    @relation("adBanner", fields: [adBannerUrl], references: [url], onDelete: SetNull)
  adType      AdTypes

  altTxt      String
  url         String?
  language    Lang @default(EN)
  status      Status @default(drafted)
}

model Video {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("videosCreated", fields: [createdById], references: [id], onDelete: SetNull)

  YoutubeUrl String?

  title       String
  longTitle   String?
  latinTitle  String?
  description String?
  language    Lang @default(EN)
  status      Status @default(drafted)
}